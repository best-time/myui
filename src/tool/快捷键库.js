/**
 * this is a mapping of keys that converts characters generated by pressing shift key
 * at the same time to characters produced when the shift key is not pressed
 *
 * @type {Object}
 */
var _SHIFT_MAP = {
	'~': '`',
	'!': '1',
	'@': '2',
	'#': '3',
	$: '4',
	'%': '5',
	'^': '6',
	'&': '7',
	'*': '8',
	'(': '9',
	')': '0',
	_: '-',
	'+': '=',
	':': ';',
	'"': "'",
	'<': ',',
	'>': '.',
	'?': '/',
	'|': '\\',
};

/**
 * get modifer key list by keyboard event
 * @param {KeyboardEvent} event - keyboard event
 * @returns {Array}
 */
const getModifierKeysByKeyboardEvent = (event) => {
	const modifiers = [];

	if (event.shiftKey) {
		modifiers.push('shift');
	}

	if (event.altKey) {
		modifiers.push('alt');
	}

	if (event.ctrlKey) {
		modifiers.push('ctrl');
	}

	if (event.metaKey) {
		modifiers.push('command');
	}

	return modifiers;
};

/**
 * get non modifier key
 * @param {string} shortcut
 * @returns {string}
 */
function getNonModifierKeyByShortcut(shortcut) {
	if (typeof shortcut !== 'string') return '';
	if (!shortcut.trim()) return '';

	const validModifierKeys = ['shift', 'ctrl', 'alt', 'command'];
	return (
		shortcut.split('+').filter((key) => !validModifierKeys.includes(key))[0] ||
		''
	);
}

/**
 * check if two modifiers match
 * @param {Array} modifers1
 * @param {Array} modifers2
 * @returns {boolean}
 */
function checkModifiersMatch(modifers1, modifers2) {
	return modifers1.sort().join(',') === modifers2.sort().join(',');
}

/**
 * check if key match
 * @param {string} shortcutKey - shortcut key
 * @param {string} eventKey - event.key
 * @returns {boolean}
 */
function checkKeyMatch(shortcutKey, eventKey) {
	if (shortcutKey === 'space') {
		return eventKey === ' ';
	}

	return shortcutKey === (_SHIFT_MAP[eventKey] || eventKey);
}

/**
 * shortcut binder class
 */
class ShortcutBinder {
	constructor() {
		/**
		 * shortcut list
		 */
		this.shortcuts = [];

		this.init();
	}

	/**
	 * init, add keyboard event listener
	 */
	init() {
		this._addKeydownEvent();
	}

	/**
	 * add keydown event
	 */
	_addKeydownEvent() {
		document.addEventListener('keydown', (event) => {
			const modifers = getModifierKeysByKeyboardEvent(event);
			const matchedShortcut = this.shortcuts.find(
				(shortcut) =>
					checkKeyMatch(shortcut.key, event.key.toLowerCase()) &&
					checkModifiersMatch(shortcut.modifiers, modifers)
			);

			if (matchedShortcut) {
				matchedShortcut.callback(event);
			}
		});
	}

	/**
	 * bind shortcut & callback
	 * @param {string} shortcut
	 * @param {Function} callback
	 */
	bind(shortcut, callback) {
		this._addShortcut(shortcut, callback);
	}

	/**
	 * add shortcut & callback to shortcut list
	 * @param {string} shortcut
	 * @param {Function} callback
	 */
	_addShortcut(shortcut, callback) {
		this.shortcuts.push({
			shortcut,
			callback,
			key: this._getKeyByShortcut(shortcut),
			modifiers: this._getModifiersByShortcut(shortcut),
		});
	}

	/**
	 * get key (character/name) by shortcut
	 * @param {string} shortcut
	 * @returns {string}
	 */
	_getKeyByShortcut(shortcut) {
		const key = getNonModifierKeyByShortcut(shortcut);
		return key.toLowerCase();
	}

	/**
	 * get modifier keys by shortcut
	 * @param {string} shortcut
	 * @returns {Array}
	 */
	_getModifiersByShortcut(shortcut) {
		const keys = shortcut.split('+').map((key) => key.trim());
		const VALID_MODIFIERS = ['shift', 'ctrl', 'alt', 'command'];
		let modifiers = [];
		keys.forEach((key) => {
			if (VALID_MODIFIERS.includes(key)) {
				modifiers.push(key);
			}
		});

		return modifiers;
	}
}

;(function() {
	const shortcutBinder = new ShortcutBinder();
	shortcutBinder.bind('ctrl+s', () => {
		console.log('ctrl+s');
	});

	shortcutBinder.bind('ctrl+shift+s', () => {
		console.log('ctrl+shift+s');
	});

	shortcutBinder.bind('space', (e) => {
		e.preventDefault();
		console.log('space');
	});

	shortcutBinder.bind('shift+5', (e) => {
		e.preventDefault();
		console.log('shift+5');
	});

	shortcutBinder.bind(`shift+\\`, (e) => {
		e.preventDefault();
		console.log('shift+\\');
	});

	shortcutBinder.bind(`f2`, (e) => {
		e.preventDefault();
		console.log('f2');
	});
})()
